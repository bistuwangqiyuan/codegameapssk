---
/**
 * Dynamic Lesson Page
 * Displays lesson content with AI tutor integration
 */
import LearningLayout from '@/layouts/LearningLayout.astro';
import { supabase } from '@/lib/supabase/client';

const { level, lesson } = Astro.params;

// Get lesson data by slug
const { data: lessonData } = await supabase
    .from('lessons')
    .select('*, levels(*)')
    .eq('slug', lesson || '')
    .single();

if (!lessonData) {
    return Astro.redirect('/learn');
}

// Get challenges for this lesson
const { data: challenges } = await supabase.from('challenges').select('*').eq('lesson_id', lessonData.id).order('sequence_order', { ascending: true });
---

<LearningLayout title={`${lessonData.title} | GameCode Lab`}>
    <div class="max-w-5xl mx-auto">
        <!-- Breadcrumb -->
        <nav class="mb-6 flex items-center gap-2 text-sm text-gray-600">
            <a href="/learn" class="hover:text-blue-600 transition-colors">Learning Path</a>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <a href={`/learn/${level}`} class="hover:text-blue-600 transition-colors">Level {level}</a>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            <span class="text-gray-900 font-semibold">{lessonData.title}</span>
        </nav>

        <!-- Lesson Header -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
            <div class="flex items-start justify-between mb-6">
                <div>
                    <h1 class="text-4xl font-bold text-gray-900 mb-3">{lessonData.title}</h1>
                    <p class="text-xl text-gray-600">{lessonData.description}</p>
                </div>
                <div class="flex items-center gap-3">
                    <span class="px-4 py-2 bg-purple-100 text-purple-700 font-semibold rounded-lg">{lessonData.xp_reward} XP</span>
                    <span class="px-4 py-2 bg-blue-100 text-blue-700 font-semibold rounded-lg">
                        {lessonData.estimated_duration} min
                    </span>
                </div>
            </div>

            <!-- Learning Objectives -->
            {
                lessonData.learning_objectives && lessonData.learning_objectives.length > 0 && (
                    <div class="mb-6">
                        <h3 class="text-lg font-bold text-gray-900 mb-3 flex items-center gap-2">
                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
                                />
                            </svg>
                            Learning Objectives
                        </h3>
                        <ul class="grid md:grid-cols-2 gap-3">
                            {lessonData.learning_objectives.map((objective: string) => (
                                <li class="flex items-start gap-2 text-gray-700">
                                    <svg class="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                    </svg>
                                    <span>{objective}</span>
                                </li>
                            ))}
                        </ul>
                    </div>
                )
            }
        </div>

        <!-- Lesson Content -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8 prose prose-lg max-w-none">
            <div set:html={lessonData.instructional_content} />
        </div>

        <!-- Challenges Section -->
        {
            challenges && challenges.length > 0 && (
                <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
                    <h2 class="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
                        <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                            />
                        </svg>
                        Practice Challenges
                    </h2>

                    <div class="space-y-4">
                        {challenges.map((challenge, index) => (
                            <div class="border border-gray-200 rounded-lg p-6 hover:border-blue-300 hover:shadow-md transition-all">
                                <div class="flex items-start justify-between mb-3">
                                    <div class="flex-1">
                                        <h3 class="text-xl font-bold text-gray-900 mb-2">
                                            Challenge {index + 1}: {challenge.title}
                                        </h3>
                                        <p class="text-gray-600 mb-3">{challenge.problem_statement}</p>
                                    </div>
                                    <div class="flex flex-col items-end gap-2">
                                        <span
                                            class={`px-3 py-1 rounded-full text-sm font-semibold ${
                                                challenge.difficulty === 'easy'
                                                    ? 'bg-green-100 text-green-700'
                                                    : challenge.difficulty === 'medium'
                                                      ? 'bg-yellow-100 text-yellow-700'
                                                      : 'bg-red-100 text-red-700'
                                            }`}
                                        >
                                            {challenge.difficulty}
                                        </span>
                                        <span class="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-semibold">{challenge.xp_reward} XP</span>
                                    </div>
                                </div>

                                <a
                                    href={`/sandbox?challenge=${challenge.id}`}
                                    class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-all transform hover:scale-105 shadow-md"
                                >
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                                    </svg>
                                    Start Challenge
                                </a>
                            </div>
                        ))}
                    </div>
                </div>
            )
        }

        <!-- Navigation -->
        <div class="flex items-center justify-between mb-8">
            <a
                href={`/learn/${level}`}
                class="inline-flex items-center px-6 py-3 bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold rounded-lg transition-all"
            >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Back to Level {level}
            </a>

            <button
                class="inline-flex items-center px-8 py-4 bg-green-600 hover:bg-green-700 text-white font-bold text-lg rounded-lg transition-all transform hover:scale-105 shadow-lg"
            >
                Mark as Complete
                <svg class="w-6 h-6 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </button>
        </div>

        <!-- AI Tutor Integration (placeholder for React component) -->
        <div id="ai-tutor-container" class="fixed bottom-6 right-6 z-50">
            <!-- AI chat interface will be hydrated here -->
        </div>
    </div>
</LearningLayout>

<script>
    // TODO: Hydrate AI chat interface component
    // import { AIAssistant } from '@/components/react/AIAssistant/ChatInterface';
</script>
